// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using icbf_app.Models;

#nullable disable

namespace icbf_app.Migrations
{
    [DbContext(typeof(IcbfAppContext))]
    [Migration("20240617210506_segundaMigracion")]
    partial class segundaMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("icbf_app.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("icbf_app.Models.Jardin", b =>
                {
                    b.Property<int>("IdJardin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJardin"));

                    b.Property<string>("DireccionJardin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccionJardin");

                    b.Property<string>("EstadoJardin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estadoJardin");

                    b.Property<string>("NombreJardin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreJardin");

                    b.HasKey("IdJardin")
                        .HasName("PK__Jardines__7E67FC6D40476AAA");

                    b.ToTable("Jardines");
                });

            modelBuilder.Entity("icbf_app.Models.MadreComunitaria", b =>
                {
                    b.Property<int>("IdMadreComunitaria")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaNacimientoMadre")
                        .HasColumnType("date")
                        .HasColumnName("fechaNacimientoMadre");

                    b.Property<int>("IdJardin")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdMadreComunitaria")
                        .HasName("PK__MadresCo__A3BE9115D749A139");

                    b.HasIndex("IdJardin");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MadresComunitarias");
                });

            modelBuilder.Entity("icbf_app.Models.Nino", b =>
                {
                    b.Property<long>("IdNino")
                        .HasColumnType("bigint");

                    b.Property<string>("CiudadNacimientoNino")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ciudadNacimientoNino");

                    b.Property<string>("DireccionNino")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("direccionNino");

                    b.Property<string>("EpsNino")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("epsNino");

                    b.Property<DateOnly>("FechaNacimientoNino")
                        .HasColumnType("date")
                        .HasColumnName("fechaNacimientoNino");

                    b.Property<string>("IdAcudiente")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idAcudiente");

                    b.Property<int>("IdJardin")
                        .HasColumnType("int")
                        .HasColumnName("idJardin");

                    b.Property<string>("NombreNino")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("nombreNino")
                        .IsFixedLength();

                    b.Property<string>("TelefonoNino")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telefonoNino");

                    b.Property<string>("TipoSangreNino")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("tipoSangreNino")
                        .IsFixedLength();

                    b.HasKey("IdNino")
                        .HasName("PK__Ninos__4059CA1FC61F3A7A");

                    b.HasIndex("IdAcudiente");

                    b.HasIndex("IdJardin");

                    b.ToTable("Ninos");
                });

            modelBuilder.Entity("icbf_app.Models.RegistroAsistencia", b =>
                {
                    b.Property<int>("IdRegistroAsistencia")
                        .HasColumnType("int");

                    b.Property<string>("EstadoNinoRegistro")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("estadoNinoRegistro")
                        .IsFixedLength();

                    b.Property<DateOnly>("FechaRegistro")
                        .HasColumnType("date")
                        .HasColumnName("fechaRegistro");

                    b.Property<long>("IdNino")
                        .HasColumnType("bigint")
                        .HasColumnName("idNino");

                    b.HasKey("IdRegistroAsistencia")
                        .HasName("PK__Registro__D29C5314CB323579");

                    b.HasIndex("IdNino");

                    b.ToTable("RegistrosAsistencia");
                });

            modelBuilder.Entity("icbf_app.Models.RegistroAvanceAcademico", b =>
                {
                    b.Property<int>("IdAvance")
                        .HasColumnType("int");

                    b.Property<int>("AnioEscolarAvance")
                        .HasColumnType("int")
                        .HasColumnName("anioEscolarAvance");

                    b.Property<string>("DescripcionAvance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcionAvance");

                    b.Property<DateOnly>("FechaEntregaAvance")
                        .HasColumnType("date")
                        .HasColumnName("fechaEntregaAvance");

                    b.Property<long>("IdNino")
                        .HasColumnType("bigint")
                        .HasColumnName("idNino");

                    b.Property<string>("NivelAvance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nivelAvance");

                    b.Property<string>("NotaAvance")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("notaAvance")
                        .IsFixedLength();

                    b.HasKey("IdAvance")
                        .HasName("PK__Registro__D83056646D1EE765");

                    b.HasIndex("IdNino");

                    b.ToTable("RegistrosAvanceAcademico", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("icbf_app.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("icbf_app.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUserToken", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("icbf_app.Models.MadreComunitaria", b =>
                {
                    b.HasOne("icbf_app.Models.Jardin", "IdJardinNavigation")
                        .WithMany("MadresComunitaria")
                        .HasForeignKey("IdJardin")
                        .IsRequired()
                        .HasConstraintName("FK_Jardin");

                    b.HasOne("icbf_app.Models.AspNetUser", "IdUsuarioNavigation")
                        .WithMany("MadresComunitaria")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Usuario");

                    b.Navigation("IdJardinNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("icbf_app.Models.Nino", b =>
                {
                    b.HasOne("icbf_app.Models.AspNetUser", "IdAcudienteNavigation")
                        .WithMany("Ninos")
                        .HasForeignKey("IdAcudiente")
                        .IsRequired()
                        .HasConstraintName("FK_NinoAcudiente");

                    b.HasOne("icbf_app.Models.Jardin", "IdJardinNavigation")
                        .WithMany("Ninos")
                        .HasForeignKey("IdJardin")
                        .IsRequired()
                        .HasConstraintName("FK_JardinNino");

                    b.Navigation("IdAcudienteNavigation");

                    b.Navigation("IdJardinNavigation");
                });

            modelBuilder.Entity("icbf_app.Models.RegistroAsistencia", b =>
                {
                    b.HasOne("icbf_app.Models.Nino", "IdNinoNavigation")
                        .WithMany("RegistrosAsistencia")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("FK_RegistrosAsistencia_Ninos");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("icbf_app.Models.RegistroAvanceAcademico", b =>
                {
                    b.HasOne("icbf_app.Models.Nino", "IdNinoNavigation")
                        .WithMany("RegistrosAvanceAcademicos")
                        .HasForeignKey("IdNino")
                        .IsRequired()
                        .HasConstraintName("FK_RegistrosAvanceAcademico_Ninos");

                    b.Navigation("IdNinoNavigation");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("icbf_app.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("MadresComunitaria");

                    b.Navigation("Ninos");
                });

            modelBuilder.Entity("icbf_app.Models.Jardin", b =>
                {
                    b.Navigation("MadresComunitaria");

                    b.Navigation("Ninos");
                });

            modelBuilder.Entity("icbf_app.Models.Nino", b =>
                {
                    b.Navigation("RegistrosAsistencia");

                    b.Navigation("RegistrosAvanceAcademicos");
                });
#pragma warning restore 612, 618
        }
    }
}
